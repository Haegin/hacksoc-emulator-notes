* Lectures
** Introduction
- Homework :: Implement memory
- Brownie Points Homework :: Read in actual compiled picoblaze binaries to memory.

*** Components
**** CPU
- Fetch/decode/execute
- Python class
**** ALU
- Like a CPU, but very specialised.
- Python class containing mathematical functions, in this case.
**** Memory
- Data/address buses. Read/write operations
- Python class containing a big array and read/write functions, in this case.
*** PicoBlaze
- Background information
- instruction set overview
*** Source control
- Using git
- git hosting services (GitHub)
- source control is great for everything!
*** Testing
- Unit testing
- Test-driven development

** Building a CPU: Part 1
- Homework :: Implement decode/execute (partial functions ok), logical/arithmetic/shift instructions

*** Homework Review
- Show/explain working memory code
*** Executing Instructions
- CPU is synchronous (show how fetch/decode/execute fit in)
- Show how to implement fetch, and how to start implementing decode/execute
- Implement ADD sX,kk and ADD sX,sY

** Building a CPU: Part 2
- Homework :: Implement control flow instructions and reset.
- Brownie Points Homework :: Implement io instructions.

*** Homework Review
- Show/explain decode/execute (should be simple)
- Show/explain instruction implementation
*** Calling Subroutines
- Explain a stack
- Show how a stack can be used for procedure calls
*** Input and Output
- Explain concept of memory-mapped IO
- Explain concept of port-based IO

** Building a CPU: Part 3
- Brownie Points Homework :: Implement interrupts and interrupt instructions.

*** Homework Review
- Show/explain control flow instructions
- Show/explain reset (should be simple)
*** Interrupts
- Explain concept of interrupts
- Explain how interrupts are useful
- Explain how they could be done

** So Long, and Thanks for All the Fish
*** Complete architecture review
- Show/explain reading in binaries
- Show/explain IO instructions
- Show/explain interrupts
- Check everyone understands it all
*** Top Down vs Bottom Up Development
- What each is
*** Other Paradigms
- Snippet of Haskell implementing some instructions
- Mention of FUN
*** Any questions?
*** Right, pub time.
